{"version":3,"sources":["redux/app/actions.js","index.js","serviceWorker.js","redux/app/reducers.js","redux/settings/reducers.js","redux/reducers.js","redux/app/saga.js","redux/sagas.js","redux/store.js","AppRenderer.js","redux/settings/actions.js","redux/actions.js"],"names":["getEmployeesSuccess","employees","type","GET_EMPLOYEES_LIST_SUCCESS","payload","then","x","require","Boolean","window","location","hostname","match","INIT_STATE","error","loading","sidebarClassName","reducers","combineReducers","app","state","action","GET_EMPLOYEES_LIST","settings","SIDEBAR_CLASSNAME","getEmployees","watchGetEmployees","rootSaga","getEmployeesAsync","a","axios","url","method","call","getResponse","status","put","data","takeEvery","all","fork","getState","appSagas","sagaMiddleware","createSagaMiddleware","middlewares","App","React","lazy","ReactDOM","render","store","initialState","createStore","compose","applyMiddleware","run","sagas","configureStore","fallback","className","document","getElementById","navigator","serviceWorker","ready","registration","unregister","setSideBarClass"],"mappings":"qGAAA,6CAKaA,EAAsB,SAACC,GAAD,MAAgB,CACjDC,KAAMC,IACNC,QAASH,K,gCCPX,mBAIE,kCAA0CI,MAAK,SAACC,GAC9CC,EAAQ,Q,sHCOQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CChBAC,EAAa,CACjBC,MAAO,GACPC,SAAS,EACTd,UAAW,ICHPY,EAAa,CACjBC,MAAO,GACPC,SAAS,EACTC,iBAAkB,ICALC,EAFEC,YAAgB,CAAEC,IFKpB,WAAiC,IAAhCC,EAA+B,uDAAvBP,EAAYQ,EAAW,uCAC7C,OAAQA,EAAOnB,MACb,KAAKoB,IACH,OAAO,2BAAKF,GAAZ,IAAmBL,SAAS,EAAMD,MAAO,KAC3C,KAAKX,IACH,OAAO,2BACFiB,GADL,IAEEL,SAAS,EACTD,MAAO,GACPb,UAAWoB,EAAOjB,UAGtB,QACE,OAAO,eAAKgB,KElBsBG,SDKzB,WAAiC,IAAhCH,EAA+B,uDAAvBP,EAAYQ,EAAW,uCAC7C,OAAQA,EAAOnB,MACb,KAAKsB,IACH,OAAO,2BAAKJ,GAAZ,IAAmBJ,iBAAkBK,EAAOjB,UAE9C,QACE,OAAO,eAAKgB,O,oEEHRK,G,WAUOC,G,WAGQC,GAnBnBC,EAAiB,uCAAG,sBAAAC,EAAA,sEAClBC,IAAM,CACVC,IAAI,iDACJC,OAAQ,QAHc,mFAAH,qDAMvB,SAAUP,EAAV,0EAEwB,OAFxB,EAAyBrB,QAAzB,kBAE8B6B,YAAKL,GAFnC,UAG+B,OADrBM,EAFV,QAGoBC,OAHpB,iBAIM,OAJN,SAIYC,YAAIpC,YAAoBkC,EAAYG,OAJhD,uIAUO,SAAUX,IAAV,iEACL,OADK,SACCY,YAAUhB,IAAoBG,GAD/B,uCAGQ,SAAUE,IAAV,iEACb,OADa,SACPY,YAAI,CAACC,YAAKd,KADH,uC,eCrBUC,GAAV,SAAUA,EAASc,GAAnB,iEACb,OADa,SACPF,YAAI,CAACG,MADE,uCCEf,IAAMC,EAAiBC,cAEjBC,EAAc,CAACF,G,YCDfG,EAAMC,IAAMC,MAAK,kBAAM,sDAE7BC,IAASC,OACP,cAAC,IAAD,CAAUC,MDAL,SAAwBC,GAC7B,IAAMD,EAAQE,YACZpC,EACAmC,EACAE,YAAQC,IAAe,WAAf,EAAmBV,KAY7B,OATAF,EAAea,IAAIC,GASZN,EChBUO,GAAjB,SACE,cAAC,WAAD,CAAUC,SAAU,qBAAKC,UAAU,YAAnC,SACE,cAACd,EAAD,QAGJe,SAASC,eAAe,SPmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5D,MAAK,SAAA6D,GACjCA,EAAaC,iB,iLQjINC,EAAkB,SAACR,GAAD,MAAgB,CAC7C1D,KAAMsB,EACNpB,QAASwD,ICJEtC,EAAqB,qBACrBnB,EAA6B,6BAC7BqB,EAAoB,sB","file":"static/js/main.58d42a2a.chunk.js","sourcesContent":["import { GET_EMPLOYEES_LIST, GET_EMPLOYEES_LIST_SUCCESS } from \"../actions\";\n\nexport const getEmployees = () => ({\n  type: GET_EMPLOYEES_LIST,\n});\nexport const getEmployeesSuccess = (employees) => ({\n  type: GET_EMPLOYEES_LIST_SUCCESS,\n  payload: employees,\n});\n","import \"./assets/styles/vendor/bootstrap.min.css\";\nimport \"./assets/styles/vendor/bootstrap.rtl.only.min.css\";\n\nlet render = () => {\n  import(\"./assets/styles/knack.main.scss\").then((x) => {\n    require(\"./AppRenderer\");\n  });\n};\nrender();\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { GET_EMPLOYEES_LIST, GET_EMPLOYEES_LIST_SUCCESS } from \"../actions\";\n\nconst INIT_STATE = {\n  error: \"\",\n  loading: false,\n  employees: [],\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case GET_EMPLOYEES_LIST:\n      return { ...state, loading: true, error: \"\" };\n    case GET_EMPLOYEES_LIST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: \"\",\n        employees: action.payload,\n      };\n\n    default:\n      return { ...state };\n  }\n};\n","import { SIDEBAR_CLASSNAME } from \"../actions\";\n\nconst INIT_STATE = {\n  error: \"\",\n  loading: false,\n  sidebarClassName: \"\",\n};\n\nexport default (state = INIT_STATE, action) => {\n  switch (action.type) {\n    case SIDEBAR_CLASSNAME:\n      return { ...state, sidebarClassName: action.payload };\n\n    default:\n      return { ...state };\n  }\n};\n","import { combineReducers } from \"redux\";\nimport app from \"./app/reducers\";\nimport settings from \"./settings/reducers\";\nconst reducers = combineReducers({ app, settings });\n\nexport default reducers;\n","import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { GET_EMPLOYEES_LIST } from \"../actions\";\nimport axios from \"axios\";\nimport { getEmployeesSuccess } from \"./actions\";\n\nconst getEmployeesAsync = async () =>\n  await axios({\n    url: `https://api.sellship.co/api/admin/getproducts/`,\n    method: \"get\",\n  });\n\nfunction* getEmployees({ payload }) {\n  try {\n    const getResponse = yield call(getEmployeesAsync);\n    if (getResponse.status === 200) {\n      yield put(getEmployeesSuccess(getResponse.data));\n    } else {\n    }\n  } catch (error) {}\n}\n\nexport function* watchGetEmployees() {\n  yield takeEvery(GET_EMPLOYEES_LIST, getEmployees);\n}\nexport default function* rootSaga() {\n  yield all([fork(watchGetEmployees)]);\n}\n","import { all } from \"redux-saga/effects\";\nimport appSagas from \"./app/saga\";\n\nexport default function* rootSaga(getState) {\n  yield all([appSagas()]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\n\nexport function configureStore(initialState) {\n  const store = createStore(\n    reducers,\n    initialState,\n    compose(applyMiddleware(...middlewares))\n  );\n\n  sagaMiddleware.run(sagas);\n\n  if (module.hot) {\n    module.hot.accept(\"./reducers\", () => {\n      const nextRootReducer = require(\"./reducers\");\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}\n","import React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { configureStore } from \"./redux/store\";\r\n\r\nconst App = React.lazy(() => import(/* webpackChunkName: \"App\" */ \"./App\"));\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <Suspense fallback={<div className=\"loading\" />}>\r\n      <App />\r\n    </Suspense>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n/*\r\n * If you want your app to work offline and load faster, you can change\r\n * unregister() to register() below. Note this comes with some pitfalls.\r\n * Learn more about service workers: https://bit.ly/CRA-PWA\r\n */\r\nserviceWorker.unregister();\r\n","import { SIDEBAR_CLASSNAME } from \"../actions\";\n\nexport const setSideBarClass = (className) => ({\n  type: SIDEBAR_CLASSNAME,\n  payload: className,\n});\n","export const GET_EMPLOYEES_LIST = \"GET_EMPLOYEES_LIST\";\nexport const GET_EMPLOYEES_LIST_SUCCESS = \"GET_EMPLOYEES_LIST_SUCCESS\";\nexport const SIDEBAR_CLASSNAME = \"SIDEBAR_CLASSNAME\";\nexport * from \"./app/actions\";\nexport * from \"./settings/actions\";\n"],"sourceRoot":""}